name: rb3
version: 18-1
summary: RB3 (Dragonboard 845) support package
description: |
 Support files for booting RB3 (Dragonboard 845) board
type: gadget

base: core18

architectures:
  - build-on: [amd64, arm64]
    run-on: arm64

confinement: strict
grade: stable

parts:
    prebuilt:
        plugin: dump
        source: prebuilt
        organize:
            '*': blobs/

    firmware-blobs:
        plugin: dump
        source: http://snapshots.linaro.org/96boards/dragonboard845c/linaro/rescue/latest/dragonboard-845c-bootloader-ufs-linux-*.zip
        source-type: zip
        organize:
             '*/*': blobs/
        stage:
            - -dragonboard-8*
            - -blobs/flashall
            - -blobs/MD5SUMS.txt
            - -blobs/NON-HLOS.bin
            - -blobs/gpt_backup*.bin
            - -blobs/gpt_both*.bin
            - -blobs/gpt*
            - -blobs/abl.elf
            - -blobs/rawprogram*
            - -blobs/patch*

    emmc-gpt-partitions:
        plugin: nil
        source: qdl
        after:
            - partioning-tool
        override-build: |
            echo "Updating partition.xml sizes from gadget.yaml"
            sizes=$(grep -e 'size' ${SNAPCRAFT_PROJECT_DIR}/gadget.yaml | awk -F ": " '{ print $2}')
            for name in $(grep -e '- name:' ${SNAPCRAFT_PROJECT_DIR}/gadget.yaml | awk -F ": " '{ print $2}')
            do
               set $sizes; size=$1; shift; sizes="$*";
               case $size in
                    (0)  size="0" ;;
                    (*G | *g) size=$(expr $(echo $size | sed -e 's/G//g' -e 's/g//g') \* 1024 \* 1024) ;;
                    (*M | *m) size=$(expr $(echo $size | sed -e 's/M//g' -e 's/m//g') \* 1024) ;;
                    (*K | *k) size=$(echo $size | sed -e 's/K//g' -e 's/k//g') ;;
                    (*) size=$(expr $size / 1024) ;;
                esac
                sed -i \
                    -e 's/\"'"${name}"'-size\"/\"'"${size}"'\"/g' \
                    partition.xml
            done
            python ${SNAPCRAFT_STAGE}/ptool.py -x partition.xml -t .
            [ -e rawprogram0_BLANK_GPT.xml ] && rm rawprogram*_BLANK_GPT.xml
            [ -e rawprogram0_WIPE_PARTITIONS.xml ] && rm rawprogram*_WIPE_PARTITIONS.xml
            xmlmerge rawprogram*.xml -o ${SNAPCRAFT_PART_INSTALL}/rawprogram.xml
            xmlmerge patch*.xml -o ${SNAPCRAFT_PART_INSTALL}/patch.xml
            cp gpt_* ${SNAPCRAFT_PART_INSTALL}/
        organize:
             '*': blobs/
        stage:
            - blobs/gpt_b*.bin
            - blobs/gpt_main*.bin
            - blobs/patch.xml
            - blobs/rawprogram.xml

    snap-boot-sel-env:
        plugin: nil
        source: snap-boot-sel
        source-type: local
        override-pull: |
            snapcraftctl pull
            wget https://raw.githubusercontent.com/snapcore/snapd/master/include/lk/snappy_boot_common.h
            wget https://raw.githubusercontent.com/snapcore/snapd/master/include/lk/snappy_boot_v1.h
        override-build: |
            gcc lk-boot-env.c -I/usr/include/ -o lk-boot-env
            # configure initial boot environment
            ./lk-boot-env --write ${SNAPCRAFT_PART_INSTALL}/snapbootsel.bin \
                          $( ./parse-yaml.sh ${SNAPCRAFT_PROJECT_DIR}/gadget.yaml ) \
                          --bootimg-file boot.img
            ln -sf snapbootsel.bin ${SNAPCRAFT_PART_INSTALL}/lk.conf

    partioning-tool:
        plugin: dump
        source: https://github.com/kubiko/partitioning_tool.git
        source-depth: 1
        source-type: git
        organize:
            LICENSE: LICENSE_for_ptool
        prime:
            - -*

